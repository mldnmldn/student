package cn.mldn.eusplatform.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import cn.mldn.eusplatform.dao.IScheduleDAO;
import cn.mldn.eusplatform.vo.Schedule;
import cn.mldn.util.dao.abs.AbstractDAO;

public class ScheduleDAOImpl extends AbstractDAO implements IScheduleDAO {
	
	@Override
	public List<Schedule> findAllByAudit(Long currentPage, Integer lineSize, Set<Integer> ids) throws SQLException {
		List<Schedule> all = new ArrayList<>();
		StringBuffer sb = new StringBuffer("select sid,seid,aeid,iid,title,sdate,subdate,audit,note,auddate,anote,ecount from schedule where audit in (") ;
		Iterator<Integer> iter = ids.iterator() ;
		while(iter.hasNext()) {
			sb.append(iter.next()).append(",") ;
		}
		sb.delete(sb.length()-1,sb.length()).append(") LIMIT ?,? ") ;
		super.pstmt = super.conn.prepareStatement(sb.toString());
		super.pstmt.setLong(1, (currentPage - 1) * lineSize);
		super.pstmt.setLong(2, lineSize);
		ResultSet rs = super.pstmt.executeQuery() ;
		while (rs.next()) {
			Schedule vo = new Schedule();
			vo.setSid(rs.getLong(1));
			vo.setSeid(rs.getString(2));
			vo.setAeid(rs.getString(3));
			vo.setIid(rs.getLong(4));
			vo.setTitle(rs.getString(5));
			vo.setSdate(rs.getDate(6));
			vo.setSubdate(rs.getDate(7));
			vo.setAudit(rs.getInt(8));
			vo.setNote(rs.getString(9));
			vo.setAuddate(rs.getDate(10));
			vo.setAnote(rs.getString(11));
			vo.setEcount(rs.getInt(12));
			all.add(vo);
		}
		return all;
	}
	
	@Override
	public List<Schedule> findSplitByAudit(String column, String keyWord, Long currentPage, Integer lineSize,
			Set<Integer> ids) throws SQLException {
		List<Schedule> all = new ArrayList<>();
		StringBuffer sb = new StringBuffer("select sid,seid,aeid,iid,title,sdate,subdate,audit,note,auddate,anote,ecount from schedule WHERE " + column + " LIKE ? and audit in (") ;
		Iterator<Integer> iter = ids.iterator() ;
		while(iter.hasNext()) {
			sb.append(iter.next()).append(",") ;
		}
		sb.delete(sb.length()-1, sb.length()).append(") LIMIT ?,?") ;
		super.pstmt = super.conn.prepareStatement(sb.toString());
		super.pstmt.setString(1, "%" + keyWord + "%");
		super.pstmt.setLong(2, (currentPage - 1) * lineSize);
		super.pstmt.setLong(3, lineSize);
		ResultSet rs = super.pstmt.executeQuery() ;
		while (rs.next()) {
			Schedule vo = new Schedule();
			vo.setSid(rs.getLong(1));
			vo.setSeid(rs.getString(2));
			vo.setAeid(rs.getString(3));
			vo.setIid(rs.getLong(4));
			vo.setTitle(rs.getString(5));
			vo.setSdate(rs.getDate(6));
			vo.setSubdate(rs.getDate(7));
			vo.setAudit(rs.getInt(8));
			vo.setNote(rs.getString(9));
			vo.setAuddate(rs.getDate(10));
			vo.setAnote(rs.getString(11));
			vo.setEcount(rs.getInt(12));
			all.add(vo);
		}
		return all;
	}
	
	@Override
	public Long getAllCount(Set<Integer> ids) throws Exception {
		StringBuffer sb = new StringBuffer("select count(*) from schedule where audit in(") ;
		Iterator<Integer> iter = ids.iterator() ;
		while(iter.hasNext()) {
			sb.append(iter.next()).append(",") ;
		}
		sb.delete(sb.length()-1, sb.length()).append(")") ;
		super.pstmt = super.conn.prepareStatement(sb.toString());
		ResultSet rs = super.pstmt.executeQuery();
		if(rs.next()){
			return rs.getLong(1);
		}
		return 0L;
	}
	
	@Override
	public Long getSplitCount(String column, String keyWord, Set<Integer> ids) throws Exception {
		StringBuffer sb = new StringBuffer("select count(*) from schedule where ? like ? and audit in(") ;
		Iterator<Integer> iter = ids.iterator() ;
		while(iter.hasNext()) {
			sb.append(iter.next()).append(",") ;
		}
		sb.delete(sb.length()-1,sb.length()).append(")") ;
		super.pstmt = super.conn.prepareStatement(sb.toString());
		super.pstmt.setString(1, column);
		super.pstmt.setString(2, "%"+ keyWord +"%");
		ResultSet rs = super.pstmt.executeQuery();
		if(rs.next()){
			return rs.getLong(1);
		}
		return 0L;
	}
	
	@Override
	public List<Schedule> findAllByAudit(Set<Integer> ids) throws SQLException {
		List<Schedule> all = new ArrayList<>();
		StringBuffer sb = new StringBuffer("select sid,seid,aeid,iid,title,sdate,subdate,audit,note,auddate,anote,ecount from schedule where audit in (") ;
		Iterator<Integer> iter = ids.iterator() ;
		while(iter.hasNext()) {
			sb.append(iter.next()).append(",") ;
		}
		sb.delete(sb.length(), sb.length()-1).append(")") ;
		super.pstmt = super.conn.prepareStatement(sb.toString());
		ResultSet rs = super.pstmt.executeQuery() ;
		while (rs.next()) {
			Schedule vo = new Schedule();
			vo.setSid(rs.getLong(1));
			vo.setSeid(rs.getString(2));
			vo.setAeid(rs.getString(3));
			vo.setIid(rs.getLong(4));
			vo.setTitle(rs.getString(5));
			vo.setSdate(rs.getDate(6));
			vo.setSubdate(rs.getDate(7));
			vo.setAudit(rs.getInt(8));
			vo.setNote(rs.getString(9));
			vo.setAuddate(rs.getDate(10));
			vo.setAnote(rs.getString(11));
			vo.setEcount(rs.getInt(12));
			all.add(vo);
		}
		return all ;
	}

	@Override
	public boolean doCreate(Schedule vo) throws SQLException {
		String sql = "insert into schedule (seid,iid,title,sdate,subdate,audit,note)value(?,?,?,?,?,?,?)";
		super.pstmt = super.conn.prepareStatement(sql);
		super.pstmt.setString(1, vo.getSeid());
		super.pstmt.setLong(2, vo.getIid());
		super.pstmt.setString(3, vo.getTitle());
		super.pstmt.setDate(4 , new java.sql.Date(vo.getSdate().getTime()));
		super.pstmt.setDate(5, new java.sql.Date(vo.getSubdate().getTime()));
		super.pstmt.setInt(6, vo.getAudit());
		super.pstmt.setString(7, vo.getNote());
		return super.pstmt.executeUpdate() > 0;
	}

	@Override
	public boolean doEdit(Schedule vo) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean doRemove(Long id) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean doRemove(Set<Long> ids) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Schedule findById(Long id) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Schedule> findAll() throws SQLException {
		List<Schedule> all = new ArrayList<>();
		String sql = "select sid,seid,aeid,iid,title,sdate,subdate,audit,note,auddate,anote,ecount from schedule ";
		super.pstmt = super.conn.prepareStatement(sql);
		ResultSet rs = super.pstmt.executeQuery() ;
		while (rs.next()) {
			Schedule vo = new Schedule();
			vo.setSid(rs.getLong(1));
			vo.setSeid(rs.getString(2));
			vo.setAeid(rs.getString(3));
			vo.setIid(rs.getLong(4));
			vo.setTitle(rs.getString(5));
			vo.setSdate(rs.getDate(6));
			vo.setSubdate(rs.getDate(7));
			vo.setAudit(rs.getInt(8));
			vo.setNote(rs.getString(9));
			vo.setAuddate(rs.getDate(10));
			vo.setAnote(rs.getString(11));
			vo.setEcount(rs.getInt(12));
			all.add(vo);
		}
		return all;
	}

	@Override
	public List<Schedule> findAll(Long currentPage, Integer lineSize) throws SQLException {
		List<Schedule> all = new ArrayList<>();
		String sql = "select sid,seid,aeid,iid,title,sdate,subdate,audit,note,auddate,anote,ecount from schedule LIMIT ?,?";
		super.pstmt = super.conn.prepareStatement(sql);
		super.pstmt.setLong(1, (currentPage - 1) * lineSize);
		super.pstmt.setLong(2, lineSize);
		ResultSet rs = super.pstmt.executeQuery() ;
		while (rs.next()) {
			Schedule vo = new Schedule();
			vo.setSid(rs.getLong(1));
			vo.setSeid(rs.getString(2));
			vo.setAeid(rs.getString(3));
			vo.setIid(rs.getLong(4));
			vo.setTitle(rs.getString(5));
			vo.setSdate(rs.getDate(6));
			vo.setSubdate(rs.getDate(7));
			vo.setAudit(rs.getInt(8));
			vo.setNote(rs.getString(9));
			vo.setAuddate(rs.getDate(10));
			vo.setAnote(rs.getString(11));
			vo.setEcount(rs.getInt(12));
			all.add(vo);
		}
		return all;
	}

	@Override
	public List<Schedule> findSplit(String column, String keyWord, Long currentPage, Integer lineSize)
			throws SQLException {
		List<Schedule> all = new ArrayList<>();
		String sql = "select sid,seid,aeid,iid,title,sdate,subdate,audit,note,auddate,anote,ecount from schedule WHERE " + column + " LIKE ? LIMIT ?,?";
		super.pstmt = super.conn.prepareStatement(sql);
		super.pstmt.setString(1, "%" + keyWord + "%");
		super.pstmt.setLong(2, (currentPage - 1) * lineSize);
		super.pstmt.setLong(3, lineSize);
		ResultSet rs = super.pstmt.executeQuery() ;
		while (rs.next()) {
			Schedule vo = new Schedule();
			vo.setSid(rs.getLong(1));
			vo.setSeid(rs.getString(2));
			vo.setAeid(rs.getString(3));
			vo.setIid(rs.getLong(4));
			vo.setTitle(rs.getString(5));
			vo.setSdate(rs.getDate(6));
			vo.setSubdate(rs.getDate(7));
			vo.setAudit(rs.getInt(8));
			vo.setNote(rs.getString(9));
			vo.setAuddate(rs.getDate(10));
			vo.setAnote(rs.getString(11));
			vo.setEcount(rs.getInt(12));
			all.add(vo);
		}
		return all;
	}

	@Override
	public Long getAllCount() throws SQLException {
		String sql = "select count(*) from schedule";
		super.pstmt = super.conn.prepareStatement(sql);
		ResultSet rs = super.pstmt.executeQuery();
		if(rs.next()){
			return rs.getLong(1);
		}
		return 0L;
	}

	@Override
	public Long getSplitCount(String column, String keyWord) throws SQLException {
		String sql = "select count(*) from schedule where ? like ?";
		super.pstmt = super.conn.prepareStatement(sql);
		super.pstmt.setString(1, column);
		super.pstmt.setString(2, "%"+ keyWord +"%");
		ResultSet rs = super.pstmt.executeQuery();
		if(rs.next()){
			return rs.getLong(1);
		}
		return 0L;
	}

}
